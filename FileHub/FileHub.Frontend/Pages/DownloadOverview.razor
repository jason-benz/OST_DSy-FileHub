@page "/downloadOverview/{GroupId?}"

@using FileHub.Frontend.Network
@using System.Net.WebSockets
@using FileHub.Frontend.Datahandling
@using FileHub.Service.Datahandling

@inject HttpClient _http
@inject IConfiguration _configuration;
@inject IJSRuntime _jsRuntime

<h3>File overview</h3>
<b>Used share code: @GroupId</b>
<br/><br/>

@if (_isLoading)
{
    <p>Loading ...</p>
}
else
{
    @if (_fileInfos.Any())
    {
        <table class="download-table">
            <tr>
                <th>Filename</th>
                <th>Filesize</th>
                <th></th>
            </tr>
    
            @foreach (var fileInfo in _fileInfos)
            {
                <tr>
                    <td>@fileInfo.Key</td>
                    <td>@fileInfo.Value</td>
                    <td><input type="button" class="btn btn-primary" value="Download" @onclick="() => DownloadFile(fileInfo.Key)"/></td>
                </tr>
            }
        </table>
        
        <br/>
        <b>@_message</b>
        <br/>
    }
    else
    {
        <p>No files found with this group id. Please try another one.</p>
    }
}

@code {
    private bool _isLoading;
    private Dictionary<string, string> _fileInfos = new();
    private string _httpBaseUrl = string.Empty;
    private string _wsBaseUrl = string.Empty;
    private string _message = string.Empty;

    [Parameter]
    public string GroupId { get; set; } = string.Empty;

    protected override async void OnInitialized()
    {
        _isLoading = true;
        
        _httpBaseUrl = _configuration.GetConnectionString("HttpBaseUrl");
        _wsBaseUrl = _configuration.GetConnectionString("WsBaseUrl");
        
        var response = await _http.GetAsync($"{_httpBaseUrl}/info/{GroupId}");
        var fileInfoRaw = await response.Content.ReadAsStringAsync();

        if (!string.IsNullOrWhiteSpace(fileInfoRaw))
        {
            _fileInfos = fileInfoRaw
                .TrimEnd(',')
                .Split(',')
                .Select(f => f.Split(':'))
                .ToDictionary(d => d[0], d => d[1]);
        }
        
        _isLoading = false;
        StateHasChanged();
    }

    private async Task DownloadFile(string filename)
    {
        _message = "Your download is being prepared. Please wait a moment.";
        
        WebsocketClient client = new (new ClientWebSocket());
        IBinaryDataHandler data = new BinaryDataHandler();
        
        await client.Connect($"{_wsBaseUrl}/receive/{GroupId}/{filename}");
        var bytes = await client.Receive(data);

        await _jsRuntime.InvokeVoidAsync("DownloadFile", filename, "application/octet-stream", bytes);
        client.Close();

        _message = "Thanks for using FileHub.";
    }
}
